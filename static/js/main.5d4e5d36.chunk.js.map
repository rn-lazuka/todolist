{"version":3,"sources":["api/api.ts","components/common/AddButton.tsx","components/ToDoList/AddNewItemForm.tsx","components/ToDoList/ToDoListTasks/ToDoListTask/TodoListTask.tsx","components/ToDoList/ToDoListTasks/TodoListTasks.tsx","components/ToDoList/ToDoListFooter/TodoListFooter.tsx","components/ToDoList/TodoListTitle/TodoListTitle.tsx","store/reducer.ts","components/ToDoList/ToDoList.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["ResultCodeEnum","ResultCodeForCaptcha","StyledButton","withStyles","root","type","color","Button","AddNewItemForm","state","error","title","onChangingValue","e","setState","currentTarget","value","onAddItemClick","newText","props","addTask","onEnterPress","key","render","className","TextField","variant","onChange","onKeyPress","helperText","placeholder","onClick","React","Component","TodoListTask","editMode","task","classForInput","activateEditMode","deactivateEditMode","changeTitle","onTitleChanged","newTitle","onIsDoneChanged","status","checked","changeStatus","deleteTask","id","classForTask","onBlur","autoFocus","IconButton","Delete","TodoListTasks","tasksElements","tasks","map","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onHideFiltersClick","isHiddenValue","onShowFiltersClick","filterValue","TodoListTitle","changeToDoListTitle","deleteToDoList","instance","axios","create","baseURL","withCredentials","headers","api","email","password","rememberMe","captcha","post","then","res","data","get","item","todolistId","items","delete","taskId","newTask","put","resultCode","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DELETE_TASK","DELETE_TODOLIST","SET_TODOLISTS","SET_TASKS","initialState","todolists","setTaskAC","addNewTaskAC","changeTaskAC","deleteToDoListAC","deleteTaskAC","changeToDoListTitleAC","ToDoList","restoreState","setTasks","newFilterValue","addNewTask","changeTask","filter","t","this","ConnectedToDoList","connect","toDoLists","dispatch","a","dataItem","getState","reverse","App","addToDoList","setTodoLists","ConnectedApp","Success","newToDoList","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d4e5d36.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ITask} from \"../entities/entities\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}\r\n});\r\nexport enum ResultCodeEnum {\r\n    Success=0,\r\n    Error=1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired=10\r\n}\r\ntype LoginResponseType = {\r\n    resultCode: ResultCodeEnum|ResultCodeForCaptcha\r\n    messages: Array<string>\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\nexport const api = {\r\n    login(email:string, password:string, rememberMe = false,captcha:string|null=null) {\r\n        debugger\r\n        return instance.post<LoginResponseType>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    getToDoLists() {\r\n        return instance.get(\"/todo-lists\").then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    addToDoList(title: string) {\r\n        return instance.post(\"/todo-lists\", {title: title}).then(\r\n            res => {\r\n                return res.data.data.item\r\n            }\r\n        )\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get(`/todo-lists/${todolistId}/tasks`).then(\r\n            res => {\r\n                return res.data.items\r\n            }\r\n        )\r\n    },\r\n    deleteToDoList(todolistId: string) {\r\n        return instance.delete(`/todo-lists/${todolistId}`)\r\n    },\r\n    addTask(todolistId: string, newText: string) {\r\n        return instance.post(`/todo-lists/${todolistId}/tasks`, {title: newText}).then(res => {\r\n            return res.data.data.item\r\n        })\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    changeTask(todolistId: string, taskId: string, newTask: ITask) {\r\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`, newTask).then(\r\n            res => {\r\n                if (res.data.resultCode === 0) {\r\n                    return res.data.data.item\r\n                }\r\n            }\r\n        )\r\n    },\r\n    changeToDoListTitle(todolistId: string, title: string) {\r\n        return instance.put(`/todo-lists/${todolistId}/`, {title})\r\n    }\r\n};","import {Button, withStyles} from '@material-ui/core';\r\n\r\n\r\nexport const StyledButton = withStyles({\r\n    root: {\r\n        type: \"contained\",\r\n        color: \"primary\"\r\n    }\r\n})(Button);\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport '../../App.css';\r\nimport {StyledButton} from '../common/AddButton';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\ninterface IProps {\r\n    addTask: Function\r\n}\r\n\r\ninterface IState {\r\n    error: string\r\n    title: string\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps, IState> {\r\n    state = {\r\n        error: \"\",\r\n        title: \"\"\r\n    };\r\n\r\n\r\n    onChangingValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({error: \"\", title: e.currentTarget.value})\r\n    };\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        this.setState({title: ''});\r\n        if (newText === \"\") {\r\n            this.setState({error: \"Field is required\"})\r\n        } else {\r\n            this.setState({error: \"\"});\r\n            this.props.addTask(newText);\r\n        }\r\n    };\r\n    onEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <TextField variant=\"outlined\"\r\n                               value={this.state.title}\r\n                               onChange={this.onChangingValue}\r\n                               onKeyPress={this.onEnterPress}\r\n                               error={!!this.state.error}\r\n                               helperText={this.state.error}\r\n                               placeholder=\"New item name\"/>\r\n                    <StyledButton variant=\"contained\" onClick={this.onAddItemClick}>Add</StyledButton>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AddNewItemForm;","import React, {ChangeEvent} from 'react';\r\nimport '../../../../App.css';\r\nimport {ITask} from '../../../../entities/entities';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Delete} from '@material-ui/icons';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\ninterface IProps {\r\n    deleteTask:(id:string)=>void\r\n    changeTitle:(task:ITask, title:string)=>void\r\n    changeStatus:(task:ITask,status:number)=>void\r\n    task:ITask\r\n}\r\ninterface IState {\r\n    editMode:boolean,\r\n    title:string\r\n    classForInput:string\r\n}\r\n\r\nclass TodoListTask extends React.Component<IProps,IState> {\r\n    state ={editMode:false,\r\n        title:this.props.task.title,\r\n        classForInput:\"\"\r\n    };\r\n    activateEditMode =():void=>{\r\n     this.setState({editMode:true,title:this.props.task.title})\r\n    };\r\n    deactivateEditMode =():void=>{\r\n        if(this.state.title!==\"\") {\r\n            this.props.changeTitle(this.props.task, this.state.title);\r\n            this.setState({editMode: false});\r\n        } else {\r\n            this.setState({classForInput: \"error\"});\r\n        }\r\n    };\r\n\r\n    onTitleChanged =(e:ChangeEvent<HTMLInputElement>):void=>{\r\n        let newTitle =  e.currentTarget.value;\r\n        this.setState({title:newTitle});\r\n    };\r\n\r\n    onIsDoneChanged = (e:ChangeEvent<HTMLInputElement>):void => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task,status)\r\n    };\r\n    deleteTask=():void=>{\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n    render = () => {\r\n        let classForTask = this.props.task.status===2?\"todoList-task done\":\"todoList-task\";\r\n        return (\r\n            <div className={classForTask}>\r\n                <input type=\"checkbox\" checked={this.props.task.status===2} onChange={this.onIsDoneChanged}/>\r\n                {this.state.editMode\r\n                ? <TextField variant=\"outlined\"\r\n                             value={this.state.title}\r\n                             onChange={this.onTitleChanged}\r\n                             onBlur={this.deactivateEditMode}\r\n                             autoFocus={true}\r\n                             className={this.state.classForInput}\r\n                    />\r\n                :<span onClick={this.activateEditMode}>{this.props.task.id} -{this.props.task.title}</span>}\r\n                <IconButton onClick={this.deleteTask}><Delete/></IconButton>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport '../../../App.css';\r\nimport TodoListTask from \"./ToDoListTask/TodoListTask\";\r\nimport {ITask} from \"../../../entities/entities\";\r\n\r\ninterface IProps {\r\n    changeTitle:(task:ITask, title:string)=>void\r\n    deleteTask:(taskId:string)=>void\r\n    changeStatus: (task:ITask, status:number)=>void\r\n    tasks: Array<ITask>\r\n}\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n    render = () => {\r\n        let tasksElements = this.props.tasks.map((task: ITask) =>\r\n            <TodoListTask deleteTask={this.props.deleteTask}\r\n                          task={task}\r\n                          key={task.id}\r\n                          changeTitle={this.props.changeTitle}\r\n                          changeStatus={this.props.changeStatus}/>);\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport '../../../App.css';\r\nimport {Button} from '@material-ui/core';\r\n\r\ninterface IProps {\r\n    changeFilter: (string: string) => void\r\n    filterValue: string\r\n}\r\n\r\ninterface IState {\r\n    isHidden: boolean\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps, IState> {\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter(\"All\")\r\n    };\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter(\"Completed\")\r\n    };\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter(\"Active\")\r\n    };\r\n\r\n    onHideFiltersClick = () => {\r\n        let isHiddenValue = this.state.isHidden;\r\n        this.setState({isHidden: !isHiddenValue})\r\n    };\r\n    onShowFiltersClick = () => {\r\n        let isHiddenValue = this.state.isHidden;\r\n        this.setState({isHidden: !isHiddenValue})\r\n    };\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n        debugger\r\n        return (\r\n\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div>\r\n                  <Button onClick={this.onAllFilterClick}\r\n                          variant={this.props.filterValue === 'All' ? 'outlined' : 'text'}\r\n                          color=\"primary\">All\r\n                  </Button>\r\n                  <Button onClick={this.onCompletedFilterClick}\r\n                          variant={this.props.filterValue === 'Completed' ? 'outlined' : 'text'}\r\n                          color=\"primary\">Completed\r\n                  </Button>\r\n                  <Button onClick={this.onActiveFilterClick}\r\n                          variant={this.props.filterValue === 'Active' ? 'outlined' : 'text'}\r\n                          color=\"primary\">Active\r\n                  </Button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>Hide</span>}\r\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>Show</span>}\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListFooter;","import React, {ChangeEvent} from 'react';\r\nimport '../../../App.css';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ninterface IProps {\r\n    changeToDoListTitle: (title: string) => void\r\n    deleteToDoList: () => void\r\n    title: string\r\n}\r\n\r\ninterface IState {\r\n    title: string\r\n    editMode: boolean\r\n    classForInput: string\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, IState> {\r\n    state = {\r\n        title: this.props.title,\r\n        editMode: false,\r\n        classForInput: \"\"\r\n    };\r\n\r\n    activateEditMode = (): void => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = (): void => {\r\n        if (this.state.title !== \"\") {\r\n            this.props.changeToDoListTitle(this.state.title);\r\n            this.setState({editMode: false});\r\n        } else {\r\n            this.setState({classForInput: \"error\"});\r\n        }\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        let newTitle = e.currentTarget.value;\r\n        this.setState({title: newTitle});\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                {this.state.editMode\r\n                    ? <input className={this.state.classForInput} onChange={this.onTitleChanged}\r\n                             onBlur={this.deactivateEditMode} autoFocus={true} value={this.state.title}/> :\r\n                    <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.state.title}\r\n                    </h3>\r\n                }\r\n                <IconButton onClick={this.props.deleteToDoList}><Delete/></IconButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import {api, ResultCodeEnum} from \"../api/api\";\r\nimport {ITask, ITodoList} from \"../entities/entities\";\r\n\r\nexport const ADD_TODOLIST = \"TODOLIST/REDUCER/ADD_TODOLIST\";\r\nexport const ADD_TASK = \"TODOLIST/REDUCER/ADD_TASK\";\r\nexport const CHANGE_TASK = \"TODOLIST/REDUCER/CHANGE_TASK\";\r\nexport const DELETE_TASK = \"TODOLIST/REDUCER/DELETE_TASK\";\r\nexport const DELETE_TODOLIST = \"TODOLIST/REDUCER/DELETE_TODOLIST\";\r\nexport const SET_TODOLISTS = \"TODOLIST/REDUCER/SET_TODOLISTS\";\r\nexport const SET_TASKS = \"TODOLIST/REDUCER/SET_TASKS\";\r\nexport const CHANGE_TODOLIST_TITLE = \"TODOLIST/REDUCER/CHANGE_TODOLIST_TITLE\";\r\n\r\n\r\ninterface IInitialState {\r\n    todolists: Array<ITodoList>\r\n}\r\n\r\nconst initialState = {\r\n    todolists: []\r\n};\r\n\r\n\r\nexport const reducer = (state: IInitialState = initialState, action: TodoListReducerActionTypes): IInitialState => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [action.newToDoList,...state.todolists],\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map((tl: ITodoList) => ({...tl, tasks: []}))\r\n            };\r\n        case SET_TASKS:\r\n            return {  \r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodoList) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodoList) => {\r\n                        if (tl.id === action.todolistId) {\r\n                            return {\r\n                                ...tl,\r\n                                tasks: tl.tasks.map((t: ITask) => {\r\n                                        if (t.id !== action.newTask.id) {\r\n                                            return t\r\n                                        } else {\r\n                                            return action.newTask\r\n                                        }\r\n                                    }\r\n                                )\r\n                            }\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodoList) => {\r\n                        if (tl.id === action.todolistId) {\r\n                            return {\r\n                                ...tl,\r\n                                title: action.title\r\n                            }\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodoList) => {\r\n                        if (tl.id === action.todolistId) {\r\n                            return {...tl, tasks: tl.tasks.filter((t: ITask) => t.id !== action.taskId)}\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter((tl: ITodoList) => tl.id !== action.todolistId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ninterface IAddToDoListAC {\r\n    type: typeof ADD_TODOLIST\r\n    newToDoList: ITodoList\r\n}\r\n\r\ninterface ISetTodoListsAC {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<ITodoList>\r\n}\r\n\r\ninterface ISetTaskAC {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<ITask>\r\n    todolistId: string\r\n}\r\n\r\ninterface IAddNewTaskAC {\r\n    type: typeof ADD_TASK\r\n    newTask: ITask\r\n    todolistId: string\r\n}\r\n\r\ninterface IChangeTaskAC {\r\n    type: typeof CHANGE_TASK\r\n    newTask: ITask\r\n    todolistId: string\r\n}\r\n\r\ninterface IDeleteToDoListAC {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\n\r\ninterface IDeleteTaskAC {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\ninterface IChangeToDoListTitleAC {\r\n    type: typeof CHANGE_TODOLIST_TITLE\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\ntype TodoListReducerActionTypes = IAddToDoListAC | ISetTodoListsAC | ISetTaskAC | IAddNewTaskAC\r\n    | IChangeTaskAC | IDeleteToDoListAC | IDeleteTaskAC | IChangeToDoListTitleAC;\r\n\r\n\r\nconst addToDoListAC = (newToDoList: ITodoList): IAddToDoListAC => ({type: ADD_TODOLIST, newToDoList});\r\nconst setTodoListsAC = (todolists: Array<ITodoList>): ISetTodoListsAC => ({type: SET_TODOLISTS, todolists});\r\nconst setTaskAC = (tasks: Array<ITask>, todolistId: string): ISetTaskAC => ({\r\n    type: SET_TASKS,\r\n    tasks,\r\n    todolistId\r\n});\r\nconst addNewTaskAC = (newTask: ITask, todolistId: string): IAddNewTaskAC => ({\r\n    type: ADD_TASK,\r\n    newTask,\r\n    todolistId\r\n});\r\nconst changeTaskAC = (newTask: ITask, todolistId: string): IChangeTaskAC => ({\r\n    type: CHANGE_TASK,\r\n    newTask,\r\n    todolistId\r\n});\r\nconst deleteToDoListAC = (todolistId: string): IDeleteToDoListAC => ({type: DELETE_TODOLIST, todolistId});\r\nconst deleteTaskAC = (todolistId: string, taskId: string): IDeleteTaskAC => ({\r\n    type: DELETE_TASK,\r\n    todolistId,\r\n    taskId\r\n});\r\nconst changeToDoListTitleAC = (todolistId: string, title: string): IChangeToDoListTitleAC => ({\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    todolistId,\r\n    title\r\n});\r\n\r\n\r\nexport const setTodoLists = () => async (dispatch: Function) => {\r\n    const loginSucces= await api.login('rn.lazuka@gmail.com', '55555Ws', true)\r\n    if (loginSucces.resultCode === ResultCodeEnum.Success) {\r\n        const dataItem: Array<ITodoList> = await api.getToDoLists();\r\n        dispatch(setTodoListsAC(dataItem))\r\n    }\r\n};\r\n\r\nexport const setTasks = (todolistId: string) => async (dispatch: Function) => {\r\n    const dataItem: Array<ITask> = await api.getTasks(todolistId);\r\n    dispatch(setTaskAC(dataItem.reverse(), todolistId))\r\n};\r\n\r\nexport const addToDoList = (title: string) => async (dispatch: Function) => {\r\n    const dataItem: ITodoList = await api.addToDoList(title);\r\n    dispatch(addToDoListAC(dataItem))\r\n};\r\n\r\nexport const addNewTask = (newText: string, todolistId: string) => async (dispatch: Function) => {\r\n    const dataItem: ITask = await api.addTask(todolistId, newText)\r\n    dispatch(addNewTaskAC(dataItem, todolistId))\r\n};\r\n\r\nexport const changeTask = (task: ITask, newTask: ITask, todolistId: string) => async (dispatch: Function) => {\r\n    const dataItem: ITask = await api.changeTask(todolistId, task.id, newTask)\r\n    dispatch(changeTaskAC(dataItem, todolistId))\r\n};\r\n\r\nexport const changeToDoListTitle = (todolistId: string, title: string) => async (dispatch: Function) => {\r\n    const dataItem: any = await api.changeToDoListTitle(todolistId, title);\r\n    dispatch(changeToDoListTitleAC(todolistId, title))\r\n};\r\n\r\nexport const deleteToDoList = (todolistId: string) => async (dispatch: Function) => {\r\n    const dataItem: any = await api.deleteToDoList(todolistId);\r\n    if (dataItem.data.resultCode === 0) {\r\n        dispatch(deleteToDoListAC(todolistId))\r\n    }\r\n};\r\n\r\nexport const deleteTask = (todolistId: string, taskId: string) => async (dispatch: Function, getState: any) => {\r\n    const dataItem: any = await api.deleteTask(todolistId, taskId);\r\n    if (dataItem.data.resultCode === 0) {\r\n        dispatch(deleteTaskAC(todolistId, taskId))\r\n    }\r\n};\r\n\r\n","import React from 'react';\r\nimport '../../App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./ToDoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"./ToDoListFooter/TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle/TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    changeToDoListTitle,\r\n    setTasks,\r\n    addNewTask,\r\n    deleteToDoList,\r\n    changeTask,\r\n    deleteTask\r\n} from \"../../store/reducer\";\r\nimport {ITask, ITodoList} from \"../../entities/entities\";\r\nimport {AppStateType} from '../../store/store';\r\n\r\ninterface IProps {\r\n    id: string\r\n    title: string\r\n    tasks: Array<ITask>\r\n}\r\n\r\ninterface IMSTP {\r\n    toDoLists: Array<ITodoList>\r\n}\r\n\r\ninterface IMDTP {\r\n    setTasks: (todolistId: string) => void\r\n    addNewTask: (newText: string, todolistId: string) => void\r\n    changeTask: (task: ITask, newTask: ITask, todolistId: string) => void\r\n    changeToDoListTitle: (todolistId: string, title: string) => void\r\n    deleteToDoList: (id: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n}\r\n\r\ninterface IState {\r\n    filterValue: string\r\n    tasks: Array<ITask>|null\r\n}\r\n\r\nclass ToDoList extends React.Component<IProps & IMSTP & IMDTP, IState> {\r\n\r\n    state = {\r\n        filterValue: \"All\",\r\n        tasks: []\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        this.restoreState()\r\n    }\r\n\r\n    restoreState: any = (): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.setTasks(todolistId);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string): void => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        });\r\n    };\r\n\r\n    addTask = (newText: string): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.addNewTask(newText, todolistId)\r\n    };\r\n\r\n    changeTask = (task: ITask, newTask: ITask): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.changeTask(task, newTask, todolistId);\r\n    };\r\n\r\n    changeStatus = (task: ITask, status: number): void => {\r\n        let newTask: ITask = {...task, status: status};\r\n        this.changeTask(task, newTask);\r\n    };\r\n\r\n    changeTitle = (task: ITask, title: string): void => {\r\n        let newTask = {...task, title: title};\r\n        this.changeTask(task, newTask)\r\n    };\r\n\r\n    changeToDoListTitle = (title: string): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.changeToDoListTitle(todolistId, title);\r\n    };\r\n\r\n    deleteToDoList = (): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.deleteToDoList(todolistId);\r\n    };\r\n\r\n    deleteTask = (taskId: string): void => {\r\n        const todolistId = this.props.id;\r\n        this.props.deleteTask(todolistId, taskId);\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div>\r\n                        <TodoListTitle changeToDoListTitle={this.changeToDoListTitle}\r\n                                       deleteToDoList={this.deleteToDoList} title={this.props.title}/>\r\n                        <AddNewItemForm addTask={this.addTask}/>\r\n\r\n                    </div>\r\n                    <TodoListTasks changeTitle={this.changeTitle}\r\n                                   deleteTask={this.deleteTask}\r\n                                   changeStatus={this.changeStatus}\r\n                                   tasks={tasks.filter((t: ITask) => {\r\n                                       switch (this.state.filterValue) {\r\n                                           case \"All\":\r\n                                               return true;\r\n                                           case \"Completed\":\r\n                                               return t.status === 2;\r\n                                           case \"Active\":\r\n                                               return t.status === 0;\r\n                                           default:\r\n                                               return true;\r\n                                       }\r\n                                   })}/>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        toDoLists: state.todolists.todolists\r\n    }\r\n};\r\n\r\nconst ConnectedToDoList = connect(mapStateToProps, {\r\n    changeTask,\r\n    deleteTask,\r\n    deleteToDoList,\r\n    changeToDoListTitle,\r\n    setTasks,\r\n    addNewTask\r\n})(ToDoList);\r\nexport default ConnectedToDoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from \"./components/ToDoList/AddNewItemForm\";\r\nimport ConnectedToDoList from \"./components/ToDoList/ToDoList\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToDoList, setTodoLists} from \"./store/reducer\";\r\nimport {ITodoList} from \"./entities/entities\";\r\nimport {AppStateType} from './store/store';\r\nimport  s from  './App.module.css'\r\n\r\ninterface IMSTP {\r\n    toDoLists: Array<ITodoList>\r\n}\r\n\r\ninterface IMDTP {\r\n    setTodoLists: () => void\r\n    addToDoList: (title: string) => void\r\n}\r\n\r\nclass App extends React.Component<IMSTP & IMDTP> {\r\n\r\n    componentDidMount(): void {\r\n        this.props.setTodoLists()\r\n    }\r\n\r\n    addToDoList = (title: string): void => {\r\n        this.props.addToDoList(title)\r\n    };\r\n\r\n    render = () => {\r\n        const todolists = this.props.toDoLists.map((t: ITodoList) => <ConnectedToDoList key={t.id} id={t.id}\r\n                                                                                        title={t.title}\r\n                                                                                        tasks={t.tasks}/>);\r\n        return (\r\n            <>\r\n                {/*<div className={s.container}>*/}\r\n                {/*    <div className={s.box}></div>*/}\r\n                {/*    <div className={s.box}>></div>*/}\r\n                {/*    <div className={s.box}>></div>*/}\r\n                {/*    <div className={s.box}>></div>*/}\r\n                {/*    <div className={s.box}>></div>*/}\r\n                {/*</div>*/}\r\n\r\n                <div>\r\n                    <AddNewItemForm addTask={this.addToDoList}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): IMSTP => {\r\n    return {\r\n        toDoLists: state.todolists.todolists\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect(mapStateToProps, {setTodoLists, addToDoList})(App);\r\nexport default ConnectedApp;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config:any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl:any, config:any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl:any, config:any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists:reducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./store/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}