{"version":3,"sources":["AddNewItemForm.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","reducer.js","ToDoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNewItemForm","state","error","title","onChangingValue","e","setState","currentTarget","value","onAddItemClick","newText","props","addTask","onEnterPress","key","render","classForInput","className","onKeyPress","onChange","type","placeholder","onClick","React","Component","TodoListTask","editMode","task","activateEditMode","deactivateEditMode","changeTitle","onTitleChanged","newTitle","onIsDoneChanged","status","checked","changeStatus","deleteTask","id","classForTask","onBlur","autoFocus","priority","TodoListTasks","tasksElements","tasks","map","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onHideFiltersClick","isHiddenValue","onShowFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","deleteToDoList","ADD_TODOLIST","ADD_TASK","CHANGE_TASK","DELETE_TASK","DELETE_TODOLIST","SET_TODOLISTS","SET_TASKS","initialState","todolists","ToDoList","nextTaskId","restoreState","todolistId","axios","get","withCredentials","then","res","data","items","setTasks","newFilterValue","post","headers","item","addNewTask","changeTask","newTask","put","resultCode","delete","taskId","filter","t","this","ConnectedToDoList","connect","toDoList","dispatch","addNewTaskAC","setTaskAC","changeTaskAC","deleteToDoListAC","deleteTaskAC","App","setTodoLists","addToDoList","ConnectedApp","newToDoList","addToDoListAC","setTodoListsAC","Boolean","window","location","hostname","match","store","createStore","action","tl","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPA0CeA,G,gNAtCXC,MAAQ,CAACC,OAAO,EAChBC,MAAM,I,EAENC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CAACJ,OAAO,EAAMC,MAAME,EAAEE,cAAcC,S,EAEtDC,eAAiB,WACb,IAAIC,EAAU,EAAKT,MAAME,MACzB,EAAKG,SAAS,CAACH,MAAM,KACL,KAAZO,EACA,EAAKJ,SAAS,CAACJ,OAAO,KAEtB,EAAKI,SAAS,CAACJ,OAAO,IACtB,EAAKS,MAAMC,QAAQF,K,EAG3BG,aAAe,SAACR,GACE,UAAVA,EAAES,KACF,EAAKL,kB,EAGbM,OAAS,WACL,IAAIC,EAAgB,EAAKf,MAAMC,MAAQ,QAAU,GACjD,OACI,yBAAKe,UAAU,mBACX,wBAAIA,UAAU,0BAA0B,EAAKN,MAAMR,OACnD,yBAAKc,UAAU,wBACX,2BAAOC,WAAY,EAAKL,aAAcM,SAAU,EAAKf,gBAAiBa,UAAWD,EAChFR,MAAO,EAAKP,MAAME,MAAQiB,KAAK,OAAOC,YAAY,kBACnD,4BAAQC,QAAS,EAAKb,gBAAtB,U,6BA9BSc,IAAMC,Y,QC8CpBC,E,2MA7CXxB,MAAO,CAACyB,UAAS,EACbvB,MAAM,EAAKQ,MAAMgB,KAAKxB,MACtBa,cAAc,I,EAElBY,iBAAkB,WACjB,EAAKtB,SAAS,CAACoB,UAAS,K,EAEzBG,mBAAoB,WACM,KAAnB,EAAK5B,MAAME,OACV,EAAKQ,MAAMmB,YAAY,EAAKnB,MAAMgB,KAAM,EAAK1B,MAAME,OACnD,EAAKG,SAAS,CAACoB,UAAU,KAEzB,EAAKpB,SAAS,CAACU,cAAe,W,EAItCe,eAAgB,SAAC1B,GACb,IAAI2B,EAAY3B,EAAEE,cAAcC,MAChC,EAAKF,SAAS,CAACH,MAAM6B,K,EAGzBC,gBAAkB,SAAC5B,GACf,IAAI6B,EAAS7B,EAAEE,cAAc4B,QAAU,EAAI,EAC3C,EAAKxB,MAAMyB,aAAa,EAAKzB,MAAMgB,KAAKO,I,EAE5CG,WAAW,WACP,EAAK1B,MAAM0B,WAAW,EAAK1B,MAAMgB,KAAKW,K,EAE1CvB,OAAS,WACL,IAAIwB,EAAwC,IAAzB,EAAK5B,MAAMgB,KAAKO,OAAW,qBAAqB,gBACnE,OACI,yBAAKjB,UAAWsB,GACZ,2BAAOnB,KAAK,WAAWe,QAAkC,IAAzB,EAAKxB,MAAMgB,KAAKO,OAAYf,SAAU,EAAKc,kBAC1E,EAAKhC,MAAMyB,SACX,2BAAOT,UAAW,EAAKhB,MAAMe,cAAeG,SAAU,EAAKY,eAAgBS,OAAQ,EAAKX,mBAAoBY,WAAW,EAAMjC,MAAO,EAAKP,MAAME,QAC/I,0BAAMmB,QAAS,EAAKM,kBAAmB,EAAKjB,MAAMgB,KAAKW,GAAvD,KAA6D,EAAK3B,MAAMgB,KAAKxB,OAC9E,6CAAmB,EAAKQ,MAAMgB,KAAKe,UACnC,4BAAQpB,QAAS,EAAKe,YAAtB,O,6BAtCWd,IAAMC,WCqBlBmB,E,2MAnBX5B,OAAS,WACL,IAAI6B,EAAgB,EAAKjC,MAAMkC,MAAMC,KAAK,SAAAnB,GAAI,OAAI,kBAAC,EAAD,CAAcU,WAAY,EAAK1B,MAAM0B,WACvBV,KAAMA,EACNG,YAAa,EAAKnB,MAAMmB,YACxBM,aAAc,EAAKzB,MAAMyB,kBAEzF,OAEI,yBAAKnB,UAAU,kBAEV2B,I,6BAXWrB,IAAMC,WCuCnBuB,E,2MAvCX9C,MAAQ,CACJ+C,UAAU,G,EAGdC,iBAAmB,WAAO,EAAKtC,MAAMuC,aAAa,Q,EAElDC,uBAAyB,WAAO,EAAKxC,MAAMuC,aAAa,c,EACxDE,oBAAsB,WAAO,EAAKzC,MAAMuC,aAAa,W,EAErDG,mBAAqB,WACjB,IAAIC,EAAgB,EAAKrD,MAAM+C,SAC/B,EAAK1C,SAAS,CAAC0C,UAAWM,K,EAE9BC,mBAAqB,WACjB,IAAID,EAAgB,EAAKrD,MAAM+C,SAC/B,EAAK1C,SAAS,CAAC0C,UAAWM,K,EAE9BvC,OAAS,WACL,IAAIyC,EAAyC,QAA3B,EAAK7C,MAAM8C,YAAwB,gBAAkB,GACnEC,EAA+C,cAA3B,EAAK/C,MAAM8C,YAA8B,gBAAkB,GAC/EE,EAA4C,WAA3B,EAAKhD,MAAM8C,YAA2B,gBAAkB,GAC7E,OACI,yBAAKxC,UAAU,oBACT,EAAKhB,MAAM+C,UAAY,6BACrB,4BAAQ1B,QAAS,EAAK2B,iBAAkBhC,UAAWuC,GAAnD,OAEA,4BAAQlC,QAAS,EAAK6B,uBAAwBlC,UAAWyC,GAAzD,aAEA,4BAAQpC,QAAS,EAAK8B,oBAAqBnC,UAAW0C,GAAtD,YAGF,EAAK1D,MAAM+C,UAAY,0BAAM1B,QAAS,EAAK+B,oBAApB,QACxB,EAAKpD,MAAM+C,UAAY,0BAAM1B,QAAS,EAAKiC,oBAApB,U,6BAjCXhC,IAAMC,WCapBoC,E,2MAXX7C,OAAS,WACL,OACI,yBAAKE,UAAU,mBACX,wBAAIA,UAAU,0BAA0B,EAAKN,MAAMR,MAAM,4BAAQmB,QAAS,EAAKX,MAAMkD,gBAA5B,Q,6BAL7CtC,IAAMC,W,ylBCH3B,IAAMsC,EAAe,gCACfC,EAAW,4BACXC,EAAc,+BACdC,EAAc,+BACdC,EAAkB,mCAClBC,EAAgB,iCAChBC,EAAY,6BAGnBC,EAAe,CACjBC,UAAW,I,6lBCCTC,E,2MACFC,WAAa,E,EACbvE,MAAQ,CACJwD,YAAa,MACbZ,MAAO,I,EAOX4B,aAAe,WACX,IAAMC,EAAa,EAAK/D,MAAM2B,GAC9BqC,IAAMC,IAAN,kEAAqEF,EAArE,UACI,CAACG,iBAAiB,EAAM,UAAW,yCAClCC,MAAK,SAAAC,GACF,IAAMlC,EAAQkC,EAAIC,KAAKC,MACvB,EAAKtE,MAAMuE,SAASrC,EAAO6B,O,EAGvCxB,aAAe,SAACiC,GACZ,EAAK7E,SAAS,CACVmD,YAAa0B,K,EAGrBvE,QAAU,SAACF,GACP,IAAMgE,EAAa,EAAK/D,MAAM2B,GAC9BqC,IAAMS,KAAN,kEAAsEV,EAAtE,UAA0F,CAACvE,MAAOO,GAC9F,CAACmE,iBAAiB,EAAMQ,QAAS,CAAC,UAAW,0CAC5CP,MAAK,SAAAC,GACF,IAAMpD,EAAOoD,EAAIC,KAAKA,KAAKM,KAC3B,EAAK3E,MAAM4E,WAAW5D,EAAM+C,O,EAMxCc,WAAa,SAAC7D,EAAM8D,GAChB,IAAMf,EAAa,EAAK/D,MAAM2B,GAC9BqC,IAAMe,IAAN,kEAAqEhB,EAArE,kBAAyF/C,EAAKW,IAAKmD,EAC/F,CAACZ,iBAAiB,EAAMQ,QAAS,CAAC,UAAW,0CAC5CP,MAAK,SAAAC,GAAsC,IAAxBA,EAAIC,KAAKW,YACzB,EAAKhF,MAAM6E,WAAWC,EAASf,O,EAK3CtC,aAAe,SAACT,EAAMO,GAClB,IAAIuD,EAAO,KAAO9D,EAAP,CAAaO,OAAQA,IAChC,EAAKsD,WAAW7D,EAAM8D,I,EAG1B3D,YAAc,SAACH,EAAMxB,GACjB,IAAIsF,EAAO,KAAO9D,EAAP,CAAaxB,MAAOA,IAC/B,EAAKqF,WAAW7D,EAAM8D,I,EAE1B5B,eAAiB,WACb,IAAMa,EAAa,EAAK/D,MAAM2B,GAC9BqC,IAAMiB,OAAN,kEAAwElB,GACpE,CAACG,iBAAiB,EAAMQ,QAAS,CAAC,UAAW,0CAC5CP,MAAK,SAAAC,GAAqC,IAAxBA,EAAIC,KAAKW,YACxB,EAAKhF,MAAMkD,eAAea,O,EAItCrC,WAAa,SAACwD,GACV,IAAMnB,EAAa,EAAK/D,MAAM2B,GAC9BqC,IAAMiB,OAAN,kEAAwElB,EAAxE,kBAA4FmB,GACxF,CAAChB,iBAAiB,EAAMQ,QAAS,CAAC,UAAW,0CAC5CP,MAAK,SAAAC,GAAqC,IAAxBA,EAAIC,KAAKW,YACxB,EAAKhF,MAAM0B,WAAWqC,EAAYmB,O,EAK9C9E,OAAS,WAAO,IAAD,EACQ,EAAKJ,MAAnBkC,aADM,MACE,GADF,EAEX,OACI,yBAAK5B,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAW,mBACZ,kBAAC,EAAD,CAAe4C,eAAgB,EAAKA,eAAgB1D,MAAO,EAAKQ,MAAMR,QACtE,kBAAC,EAAD,CAAgBS,QAAS,EAAKA,WAGlC,kBAAC,EAAD,CAAekB,YAAa,EAAKA,YAClBO,WAAY,EAAKA,WACjBD,aAAc,EAAKA,aACnBS,MAAOA,EAAMiD,QAAO,SAACC,GACjB,OAAQ,EAAK9F,MAAMwD,aACf,IAAK,MACD,OAAO,EACX,IAAK,YACD,OAAkB,IAAXsC,EAAE7D,OACb,IAAK,SACD,OAAkB,IAAX6D,EAAE7D,OACb,QACI,OAAO,QAGlC,kBAAC,EAAD,CAAgBgB,aAAc,EAAKA,aAAcO,YAAa,EAAKxD,MAAMwD,iB,mFA5FrFuC,KAAKvB,mB,GARUlD,IAAMC,WAuIdyE,EADWC,aA1BF,SAACjG,GACrB,MAAO,CACHkG,SAAUlG,EAAMqE,cAGG,SAAC8B,GAExB,MAAO,CACHb,WAAY,SAACE,EAASf,GAClB0B,EDhBgB,SAACX,EAASf,GAAV,MAA0B,CAACtD,KAAM2C,EAAU0B,UAASf,cCgB3D2B,CAAaZ,EAASf,KAEnCQ,SAAU,SAACrC,EAAO6B,GACd0B,EDpBa,SAACvD,EAAO6B,GAAR,MAAwB,CAACtD,KAAMgD,EAAWvB,QAAO6B,cCoBrD4B,CAAUzD,EAAO6B,KAE9Bc,WAAY,SAACC,EAASf,GAClB0B,EDrBgB,SAACX,EAASf,GAAV,MAA0B,CAACtD,KAAM4C,EAAayB,UAASf,cCqB9D6B,CAAad,EAASf,KAEnCb,eAAgB,SAACa,GACb0B,EDvBoB,SAAC1B,GAAD,MAAiB,CAACtD,KAAM8C,EAAiBQ,cCuBpD8B,CAAiB9B,KAE9BrC,WAAY,SAACqC,EAAYmB,GACrBO,EDzBgB,SAAC1B,EAAYmB,GAAb,MAAyB,CAACzE,KAAM6C,EAAaS,aAAYmB,UCyBhEY,CAAa/B,EAAYmB,QAKpBK,CAA6C3B,GCxIjEmC,E,2MAKFjC,aAAe,WACXE,IAAMC,IAAI,0DACN,CAACC,iBAAiB,EAAM,UAAU,yCACjCC,MAAK,SAAAC,GACF,EAAKpE,MAAMgG,aAAa5B,EAAIC,U,EAKxC4B,YAAc,SAACzG,GACXwE,IAAMS,KAAK,0DAA2D,CAACjF,MAAMA,GACzE,CAAC0E,iBAAiB,EAAOQ,QAAQ,CAAC,UAAW,0CAC5CP,MAAK,SAAAC,GACF,EAAKpE,MAAMiG,YAAY7B,EAAIC,KAAKA,KAAKM,U,EAIjDvE,OAAS,WACL,IAAMuD,EAAY,EAAK3D,MAAMwF,SAASrD,KAAI,SAAAiD,GAAC,OAAI,kBAAC,EAAD,CAAmBzD,GAAIyD,EAAEzD,GAAInC,MAAO4F,EAAE5F,MAAO0C,MAAOkD,EAAElD,WACrG,OACI,oCACI,6BACI,kBAAC,EAAD,CAAgBjC,QAAS,EAAKgG,eAElC,yBAAK3F,UAAU,OACVqD,K,mFA3Bd0B,KAAKvB,mB,GAHMlD,IAAMC,WAsDTqF,EADMX,aAfG,SAACjG,GACrB,MAAO,CACHkG,SAAUlG,EAAMqE,cAGG,SAAC8B,GACxB,MAAO,CACHQ,YAAa,SAACE,GACVV,EFsDiB,SAACU,GAAD,MAAkB,CAAC1F,KAAM0C,EAAcgD,eEtD/CC,CAAcD,KAE3BH,aAAc,SAACrC,GACX8B,EFoDkB,SAAC9B,GAAD,MAAgB,CAAClD,KAAM+C,EAAeG,aEpD/C0C,CAAe1C,QAIf4B,CAA4CQ,GClD7CO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdSC,EADDC,aJ4BS,WAAmC,IAAlCtH,EAAiC,uDAAzBoE,EAAcmD,EAAW,uCACrD,OAAQA,EAAOpG,MACX,KAAK0C,EACD,OAAO,EAAP,GACO7D,EADP,CAEIqE,UAAU,GAAD,mBAAMrE,EAAMqE,WAAZ,CAAuBkD,EAAOV,gBAE/C,KAAK3C,EACD,OAAO,EAAP,GACOlE,EADP,CAEIqE,UAAWkD,EAAOlD,UAAUxB,KAAI,SAAA2E,GAAE,YAASA,EAAT,CAAa5E,MAAO,UAE9D,KAAKuB,EACD,OAAO,EAAP,GACOnE,EADP,CAEIqE,UAAWrE,EAAMqE,UAAUxB,KAAI,SAAA2E,GAC3B,OAAIA,EAAGnF,KAAOkF,EAAO9C,WACV,EAAP,GAAW+C,EAAX,CAAe5E,MAAO2E,EAAO3E,QAEtB4E,OAIvB,KAAK1D,EACD,OAAO,EAAP,GACO9D,EADP,CAEIqE,UAAWrE,EAAMqE,UAAUxB,KAAI,SAAA2E,GAC3B,OAAIA,EAAGnF,KAAOkF,EAAO9C,WACV,EAAP,GAAW+C,EAAX,CAAe5E,MAAM,GAAD,mBAAM4E,EAAG5E,OAAT,CAAgB2E,EAAO/B,YAEpCgC,OAIvB,KAAKzD,EACD,OAAO,EAAP,GACO/D,EADP,CAEIqE,UAAWrE,EAAMqE,UAAUxB,KAAI,SAAA2E,GACvB,OAAIA,EAAGnF,KAAOkF,EAAO9C,WACV,EAAP,GACO+C,EADP,CAEI5E,MAAO4E,EAAG5E,MAAMC,KAAI,SAAAiD,GACZ,OAAIA,EAAEzD,KAAOkF,EAAO/B,QAAQnD,GACjByD,EAEAyB,EAAO/B,aAMvBgC,OAK3B,KAAKxD,EACD,OAAO,EAAP,GACOhE,EADP,CAEIqE,UAAWrE,EAAMqE,UAAUxB,KAAI,SAAA2E,GACvB,OAAIA,EAAGnF,KAAOkF,EAAO9C,WACV,EAAP,GAAW+C,EAAX,CAAe5E,MAAO4E,EAAG5E,MAAMiD,QAAO,SAAAC,GAAC,OAAIA,EAAEzD,KAAOkF,EAAO3B,YAEpD4B,OAK3B,KAAKvD,EACD,OAAO,EAAP,GACOjE,EADP,CAEIqE,UAAWrE,EAAMqE,UAAUwB,QAAO,SAAA2B,GAAE,OAAIA,EAAGnF,KAAOkF,EAAO9C,gBAEjE,QACI,OAAOzE,MK/FnByH,IAAS3G,OACL,kBAAC,IAAD,CAAUuG,MAAOA,GACb,kBAAC,EAAD,OACSK,SAASC,eAAe,SFoHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,iB","file":"static/js/main.4a381be5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    state = {error: false,\r\n    title:''};\r\n\r\n    onChangingValue = (e) => {\r\n        this.setState({error: false,title:e.currentTarget.value})\r\n    };\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        this.setState({title:''});\r\n        if (newText === \"\") {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addTask(newText);\r\n        }\r\n    };\r\n    onEnterPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n    render = () => {\r\n        let classForInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input onKeyPress={this.onEnterPress} onChange={this.onChangingValue} className={classForInput}\r\n                     value={this.state.title}  type=\"text\" placeholder=\"New item name\" />\r\n                    <button onClick={this.onAddItemClick} >Add</button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\nimport './App.css';\r\n\r\nclass TodoListTask extends React.Component {\r\n    state ={editMode:false,\r\n        title:this.props.task.title,\r\n        classForInput:\"\"\r\n    };\r\n    activateEditMode =()=>{\r\n     this.setState({editMode:true})\r\n    };\r\n    deactivateEditMode =()=>{\r\n        if(this.state.title!==\"\") {\r\n            this.props.changeTitle(this.props.task, this.state.title);\r\n            this.setState({editMode: false});\r\n        } else {\r\n            this.setState({classForInput: \"error\"});\r\n        }\r\n    };\r\n\r\n    onTitleChanged =(e)=>{\r\n        let newTitle =  e.currentTarget.value;\r\n        this.setState({title:newTitle});\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task,status )\r\n    };\r\n    deleteTask=()=>{\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n    render = () => {\r\n        let classForTask = this.props.task.status===2?\"todoList-task done\":\"todoList-task\";\r\n        return (\r\n            <div className={classForTask}>\r\n                <input type=\"checkbox\" checked={this.props.task.status===2} onChange={this.onIsDoneChanged}/>\r\n                {this.state.editMode\r\n                ?<input className={this.state.classForInput} onChange={this.onTitleChanged} onBlur={this.deactivateEditMode} autoFocus={true} value={this.state.title}/>\r\n                :<span onClick={this.activateEditMode}>{this.props.task.id} -{this.props.task.title}</span>}\r\n                <span>, priority: {this.props.task.priority}</span>\r\n                <button onClick={this.deleteTask}>X</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport './App.css';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n    render = () => {\r\n        let tasksElements = this.props.tasks.map (task => <TodoListTask deleteTask={this.props.deleteTask}\r\n                                                                        task={task}\r\n                                                                        changeTitle={this.props.changeTitle}\r\n                                                                        changeStatus={this.props.changeStatus}/>);\r\n\r\n        return (\r\n\r\n            <div className=\"todoList-tasks\">\r\n\r\n                {tasksElements}\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport './App.css';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")\r\n    };\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")};\r\n\r\n    onHideFiltersClick = () => {\r\n        let isHiddenValue = this.state.isHidden;\r\n        this.setState({isHidden: !isHiddenValue})\r\n    };\r\n    onShowFiltersClick = () => {\r\n        let isHiddenValue = this.state.isHidden;\r\n        this.setState({isHidden: !isHiddenValue})\r\n    };\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden && <div>\r\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All\r\n                    </button>\r\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed\r\n                    </button>\r\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active\r\n                    </button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>Hide</span>}\r\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>Show</span>}\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\nimport './App.css';\r\n\r\nclass TodoListTitle extends React.Component {\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <h3 className=\"todoList-header__title\">{this.props.title}<button onClick={this.props.deleteToDoList}>X</button></h3>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTitle;","export const ADD_TODOLIST = \"TODOLIST/REDUCER/ADD_TODOLIST\";\r\nexport const ADD_TASK = \"TODOLIST/REDUCER/ADD_TASK\";\r\nexport const CHANGE_TASK = \"TODOLIST/REDUCER/CHANGE_TASK\";\r\nexport const DELETE_TASK = \"TODOLIST/REDUCER/DELETE_TASK\";\r\nexport const DELETE_TODOLIST = \"TODOLIST/REDUCER/DELETE_TODOLIST\";\r\nexport const SET_TODOLISTS = \"TODOLIST/REDUCER/SET_TODOLISTS\";\r\nexport const SET_TASKS = \"TODOLIST/REDUCER/SET_TASKS\";\r\n\r\n\r\nconst initialState = {\r\n    todolists: [/*{\r\n        id: 0, title: \"WhatToEat\", tasks: [{id: 0, title: \"Pizza\", isDone: false, priority: \"low\"},\r\n            {id: 1, title: \"More pizza\", isDone: false, priority: \"low\"}, {\r\n                id: 2,\r\n                title: \"IceCream\",\r\n                isDone: false,\r\n                priority: \"low\"\r\n            }]\r\n    },\r\n        {\r\n            id: 1, title: \"WhatToLearn\", tasks: [{id: 0, title: \"React\", isDone: false, priority: \"low\"},\r\n                {id: 1, title: \"Redux\", isDone: false, priority: \"low\"}, {\r\n                    id: 2,\r\n                    title: \"Hooks\",\r\n                    isDone: false,\r\n                    priority: \"low\"\r\n                }]\r\n        }*/]\r\n};\r\n\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newToDoList],\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id === action.todolistId) {\r\n                            return {\r\n                                ...tl,\r\n                                tasks: tl.tasks.map(t => {\r\n                                        if (t.id !== action.newTask.id) {\r\n                                            return t\r\n                                        } else {\r\n                                            return action.newTask\r\n                                        }\r\n                                    }\r\n                                )\r\n                            }\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id === action.todolistId) {\r\n                            return {...tl, tasks: tl.tasks.filter(t => t.id !== action.taskId)}\r\n                        } else {\r\n                            return tl\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addToDoListAC = (newToDoList) => ({type: ADD_TODOLIST, newToDoList});\r\nexport const setTodoListsAC = (todolists) => ({type: SET_TODOLISTS, todolists});\r\nexport const setTaskAC = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nexport const addNewTaskAC = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\r\nexport const changeTaskAC = (newTask, todolistId) => ({type: CHANGE_TASK, newTask, todolistId});\r\nexport const deleteToDoListAC = (todolistId) => ({type: DELETE_TODOLIST, todolistId});\r\nexport const deleteTaskAC = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId});","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {addNewTaskAC, changeTaskAC, deleteTaskAC, deleteToDoListAC, setTaskAC} from \"./reducer\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass ToDoList extends React.Component {\r\n    nextTaskId = 0;\r\n    state = {\r\n        filterValue: \"All\",\r\n        tasks: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n    restoreState = () => {\r\n        const todolistId = this.props.id;\r\n        axios.get(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks`,\r\n            {withCredentials: true, \"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"})\r\n            .then(res => {\r\n                const tasks = res.data.items;\r\n                this.props.setTasks(tasks, todolistId);\r\n            });\r\n    };\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        });\r\n    };\r\n    addTask = (newText) => {\r\n        const todolistId = this.props.id;\r\n        axios.post(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks`, {title: newText},\r\n            {withCredentials: true, headers: {\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}})\r\n            .then(res => {\r\n                const task = res.data.data.item;\r\n                this.props.addNewTask(task, todolistId)\r\n\r\n            });\r\n    };\r\n\r\n\r\n    changeTask = (task, newTask) => {\r\n        const todolistId = this.props.id;\r\n        axios.put(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks/${task.id}`,newTask,\r\n            {withCredentials: true, headers: {\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}})\r\n            .then(res => {  if (res.data.resultCode === 0) {\r\n                this.props.changeTask(newTask, todolistId)\r\n            }\r\n            });\r\n    };\r\n\r\n    changeStatus = (task, status) => {\r\n        let newTask = {...task, status: status};\r\n        this.changeTask(task, newTask);\r\n    };\r\n\r\n    changeTitle = (task, title) => {\r\n        let newTask = {...task, title: title};\r\n        this.changeTask(task, newTask)\r\n    };\r\n    deleteToDoList = () => {\r\n        const todolistId = this.props.id;\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}`,\r\n            {withCredentials: true, headers: {\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}})\r\n            .then(res => { if (res.data.resultCode === 0) {\r\n                this.props.deleteToDoList(todolistId)\r\n            }\r\n            });\r\n    };\r\n    deleteTask = (taskId) => {\r\n        const todolistId = this.props.id;\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks/${taskId}`,\r\n            {withCredentials: true, headers: {\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}})\r\n            .then(res => { if (res.data.resultCode === 0) {\r\n                this.props.deleteTask(todolistId, taskId)\r\n            }\r\n            });\r\n\r\n    };\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div className={'todoList-header'}>\r\n                        <TodoListTitle deleteToDoList={this.deleteToDoList} title={this.props.title}/>\r\n                        <AddNewItemForm addTask={this.addTask}/>\r\n\r\n                    </div>\r\n                    <TodoListTasks changeTitle={this.changeTitle}\r\n                                   deleteTask={this.deleteTask}\r\n                                   changeStatus={this.changeStatus}\r\n                                   tasks={tasks.filter((t) => {\r\n                                       switch (this.state.filterValue) {\r\n                                           case \"All\":\r\n                                               return true;\r\n                                           case \"Completed\":\r\n                                               return t.status===2;\r\n                                           case \"Active\":\r\n                                               return t.status===0;\r\n                                           default:\r\n                                               return true;\r\n                                       }\r\n                                   })}/>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        toDoList: state.todolists\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        addNewTask: (newTask, todolistId) => {\r\n            dispatch(addNewTaskAC(newTask, todolistId))\r\n        },\r\n        setTasks: (tasks, todolistId) => {\r\n            dispatch(setTaskAC(tasks, todolistId))\r\n        },\r\n        changeTask: (newTask, todolistId) => {\r\n            dispatch(changeTaskAC(newTask, todolistId))\r\n        },\r\n        deleteToDoList: (todolistId) => {\r\n            dispatch(deleteToDoListAC(todolistId))\r\n        },\r\n        deleteTask: (todolistId, taskId) => {\r\n            dispatch(deleteTaskAC(todolistId, taskId))\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedToDoList = connect(mapStateToProps, mapDispatchToProps)(ToDoList);\r\nexport default ConnectedToDoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport ConnectedToDoList from \"./ToDoList\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToDoListAC, setTodoListsAC} from \"./reducer\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n   componentDidMount() {\r\n       this.restoreState();\r\n   }\r\n    restoreState = () => {\r\n        axios.get(\"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n            {withCredentials: true, \"API-KEY\":\"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"})\r\n            .then(res => {\r\n                this.props.setTodoLists(res.data)\r\n            });\r\n    };\r\n\r\n\r\n    addToDoList = (title) => {\r\n        axios.post(\"https://social-network.samuraijs.com/api/1.1/todo-lists\", {title:title},\r\n            {withCredentials: true,  headers:{\"API-KEY\": \"6d54c1cb-0079-4662-b13d-27d4ae8cf67d\"}})\r\n            .then(res => {\r\n                this.props.addToDoList(res.data.data.item)\r\n            });\r\n    };\r\n\r\n    render = () => {\r\n        const todolists = this.props.toDoList.map(t => <ConnectedToDoList id={t.id} title={t.title} tasks={t.tasks}/>);\r\n        return (\r\n            <>\r\n                <div>\r\n                    <AddNewItemForm addTask={this.addToDoList}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        toDoList: state.todolists\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addToDoList: (newToDoList)=>{\r\n            dispatch(addToDoListAC(newToDoList))\r\n        },\r\n        setTodoLists: (todolists)=>{\r\n            dispatch(setTodoListsAC(todolists))\r\n        }\r\n    }\r\n};\r\nconst ConnectedApp = connect(mapStateToProps,mapDispatchToProps)(App);\r\nexport default ConnectedApp;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}